S20_R       (OP u 8) (dest u 4) (imm s 20)
S16_R_R     (OP u 8) (z u 4) (y u 4) (imm s 16)
R_R_R       (OP u 8) (z u 4) (y u 4) (x u 4)
MEM         (OP u 8) (data u 4) (addr u 4) (offset s 16)

0x02 R_R_R
:   halt %x
    ulm_halt(ulm_regVal(x));

0x11 S20_R
#   Load sign extended immediate value into destination register.
:   load imm, %dest
    ulm_setReg(imm, dest);

0x13 R_R_R
#   Adds register \\texttt{%x} to register \\texttt{%y} and stores the result in
#   register \\texttt{%z}.
:   add %x, %y, %z
    ulm_add64(ulm_regVal(x), ulm_regVal(y), z);
    
0x14 R_R_R
#   Substracts register \texttt{%y} from register \\texttt{%x} and stores the result in
#   register \texttt{%z}.
:   sub %x, %y, %z
    ulm_sub64(ulm_regVal(x), ulm_regVal(y), z);

0x17 R_R_R
:   mul %x, %y, %z
    ulm_mul64(ulm_regVal(x), ulm_regVal(y), z);

0x18 R_R_R
:   div %x, %y, %z
    ulm_idiv64(ulm_regVal(x), ulm_regVal(y), z);

0x23 MEM
:   movq offset(%addr), %data
:   movq (%addr), %data
    ulm_fetch64(offset, addr, 0, 1, ULM_ZERO_EXT, 8, data);
    
0x24 MEM
:   movq %data, offset(%addr)
:   movq %data, (%addr)
    ulm_store64(offset, addr, 0, 0, 8, data);

0x30 S16_R_R
:   add imm, %y, %z
    ulm_add64(imm, ulm_regVal(y), z);
0x31 S16_R_R
:   sub imm, %y, %z
    ulm_sub64(imm, ulm_regVal(y), z);
0x32 S20_R
:   call imm, %dest
    ulm_absJump(imm, dest);
0x33 R_R_R
:   ret %x
    ulm_absJump(ulm_regVal(x), 0);
0x34 R_R_R
:   movq %x, %y
    ulm_add64(ulm_regVal(x), ulm_regVal(0), y);
0x35 R_R_R
:   putc %x
    ulm_printChar(ulm_regVal(x));
0x36 R_R_R
:   getc %x
    ulm_setReg(ulm_readChar(), x);
