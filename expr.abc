@ <stdio.hdr>
@ <stdlib.hdr>
@ "expr.hdr"
@ "string.hdr"
@ "gen.hdr"

fn exprKindToGenInstr(kind: ExprKind): GenInstr;

fn createBinaryExpr(kind: ExprKind, left: ->Expr, right: ->Expr): ->Expr
{
    local n: ->Expr = malloc(sizeof(*n));
    assert(n);
    n->kind = kind;
    n->left = left;
    n->right = right;
    return n;
}

fn createIntegerExpr(val: string): ->Expr
{
    local n: ->Expr = malloc(sizeof(*n));
    assert(n);
    n->kind = EXPR_INTEGER;
    n->decimal = val;
    return n;
}

fn createIdentifierExpr(name: string): ->Expr
{
    local n: -> Expr = malloc(sizeof(*n));
    assert(n);
    n->kind = EXPR_IDENTIFIER;
    n->identifier = name;
    return n;
}

fn releaseExpr(expr: ->Expr)
{
    if (expr->kind == EXPR_INTEGER) {
        free(expr);
    }else if (expr->kind > EXPR_BINARY && expr->kind < EXPR_BINARY_END) {
        releaseExpr(expr->left);
        releaseExpr(expr->right);
        free(expr);
    }
}

fn printExprTree(expr: -> Expr)
{
    if (expr->kind > EXPR_PRIMARY && expr->kind < EXPR_PRIMARY_END) {
        switch (expr->kind) {
            case EXPR_INTEGER: printf(" [ %s ]", expr->decimal); break;
            case EXPR_IDENTIFIER: printf(" [ %s ]", expr->identifier); break;
            default: assert(0);
        }
    }else if (expr->kind > EXPR_BINARY && expr->kind < EXPR_BINARY_END) {
        printf(" [ ");
        switch (expr->kind) {
            case EXPR_ADD: printf("+"); break;
            case EXPR_DIV: printf("/"); break;
            case EXPR_MUL: printf("*"); break;
            case EXPR_SUB: printf("-"); break;
            case EXPR_ASSIGN: printf("{=}"); break;
            default: assert(0);
        }
        printExprTree(expr->left);
        printExprTree(expr->right);
        printf(" ] ");
    }
}

fn printExprLatexTree(expr: -> Expr)
{
    printf("\\item\n\\[\n\\begin{forest}\nfor tree={draw,circle,calign=fixed edge angles}\n");
    printExprTree(expr);
    printf("\n\\end{forest}\n\\]\n");
}

fn loadExpr(expr: -> Expr): GenReg
{
    if (expr->kind > EXPR_PRIMARY && expr->kind < EXPR_PRIMARY_END) {
        return genConstant(expr->decimal);
    }else if (expr->kind > EXPR_BINARY && expr->kind < EXPR_BINARY_END) {
        local left: GenReg = loadExpr(expr->left);
        local right: GenReg = loadExpr(expr->right);
        genReleaseReg(left);
        genReleaseReg(right);
        return genInstr(exprKindToGenInstr(expr->kind), left, right);
    }
    assert(0 && "loadExpr: not all cases handled!");
    return genConstant("0");
    
}

fn exprKindToGenInstr(kind: ExprKind): GenInstr
{
    switch(kind){
        case EXPR_ADD: return GEN_ADD;
        case EXPR_SUB: return GEN_SUB;
        case EXPR_MUL: return GEN_MUL;
        case EXPR_DIV: return GEN_DIV;
        default:
            assert (0 && "exprKindToGenInstr: no binary Expression");
            return 0;
    }
}