@ <stdio.hdr>
@ "lexer.hdr"
@ "string.hdr"
@ "ustr.hdr"
// -- internal: only available within this translation unit
global ch: int;
global currentPos: Pos = {1,0};
global lengthVal: size_t;
global val: string;

fn isDigit(ch: int): bool
{
    return ch >= '0' && ch <= '9';
}

fn isLetter(ch: int): bool
{
    return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');
}

fn nextCh(updateVal: bool)
{
    if (updateVal) {
        assert(lengthVal < sizeof(val) / sizeof(val[0]) - 1);
        val[lengthVal++] = ch;
        val[lengthVal] = 0;
    } else {
        lengthVal = 0;
    }
    ch = getchar();
    if (ch == '\n') {
        ++currentPos.row;
        currentPos.col = 0;
    } else {
        ++currentPos.col;
    }
}

// -- exported: available for other translation units
global token: Token;
fn getToken_(): TokenKind
{
    lengthVal = 0;
    while (ch == 0 || ch == ' ' || ch == '\n' || ch == '\t') {
        nextCh(false);
    }
    token.pos = currentPos;
    if (isDigit(ch)) {
        while (isDigit(ch)) {
            nextCh(true);
        }
        return token.kind = DECIMAL_LITERAL;
    } else if (isLetter(ch)) {
        while (isLetter(ch) || isDigit(ch)) {
            nextCh(true);
        }
        return token.kind = IDENTIFIER;
    } else if (ch == '+') {
        nextCh(true);
        return token.kind = PLUS;
    } else if (ch == '-') {
        nextCh(true);
        return token.kind = MINUS;
    } else if (ch == '*') {
        nextCh(true);
        return token.kind = ASTERISK;
    } else if (ch == '/') {
        nextCh(true);
        return token.kind = SLASH;
    } else if (ch == '(') {
        nextCh(true);
        return token.kind = LPAREN;
    } else if (ch == ')') {
        nextCh(true);
        return token.kind = RPAREN;
    } else if (ch == EOF) {
        return token.kind = EOI;
    } else if (ch == ';') {
        nextCh(true);
        return token.kind = SEMICOLON;
    } else if (ch == '=') {
        nextCh(true);
        return token.kind = EQUAL;
    } else if (ch == '&') {
        nextCh(true);
        return token.kind = AMPERSAND;
    } else {
        nextCh(true);
        return token.kind = BAD_TOKEN;
    }
}

fn getToken(): TokenKind
{
    getToken_();
    token.val = UStrCreate(val);
    return token.kind;
}

fn tokenKindStr(token: TokenKind): -> char
{
    local str: -> char = "??";
    switch (token) {
        case BAD_TOKEN:
            str = "BAD_TOKEN";
            break;
        case EOI:
            str = "EOI";
            break;
        case DECIMAL_LITERAL:
            str = "DECIMAL_LITERAL";
            break;
        case PLUS:
            str = "PLUS";
            break;
        case MINUS:
            str = "MINUS";
            break;
        case ASTERISK:
            str = "ASTERISK";
            break;
        case SLASH:
            str = "SLASH";
            break;
        case IDENTIFIER:
            str = "IDENTIFIER";
            break;
        case LPAREN:
            str = "LPAREN";
            break;
        case RPAREN:
            str = "RPAREN";
            break;
        case SEMICOLON:
            str = "SEMICOLON";
            break;
        case EQUAL:
            str = "EQUAL";
            break;        
        case AMPERSAND:
            str = "AMPERSAND";
            break;
        default:
            str = "??";
            break;
    }
    return str;
}
