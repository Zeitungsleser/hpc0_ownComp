@ <stdio.hdr>
@ "parser.hdr"
@ "lexer.hdr"

fn parseTerm(): -> Expr;
fn parseFactor(): -> Expr;

fn parseExpr(): -> Expr
{
    local left: -> Expr = parseTerm();
    if (!left) {
        return nullptr;
    }
    while (token.kind == PLUS || token.kind == MINUS) {
        local symbol: ExprKind = (token.kind == PLUS) ? EXPR_ADD : EXPR_SUB;
        getToken();
        local right: -> Expr = parseTerm();
        if (!right) {
            printf("%u.%u expected term\n",
                   token.pos.row, token.pos.col);
            assert(0);
        }
        left = createBinaryExpr(symbol, left, right);
    }
    return left;
}

fn parseTerm(): -> Expr
{
    local left: -> Expr = parseFactor();
    if (!left) {
        return nullptr;
    }
    while (token.kind == ASTERISK || token.kind == SLASH) {
        local symbol: ExprKind = (token.kind == ASTERISK) ? EXPR_MUL : EXPR_DIV;
        getToken();
        local right: -> Expr = parseFactor();
        if (!right) {
            printf("%u.%u expected term\n",
                   token.pos.row, token.pos.col);
            assert(0);
        }
        left = createBinaryExpr(symbol, left, right);
    }
    return left;
}

fn parseFactor(): -> Expr
{
    if (token.kind == DECIMAL_LITERAL) {
        local expr: -> Expr = createIntegerExpr(token.val);
        getToken();
        return expr;
    } else if (token.kind == LPAREN) {
        getToken();
        local expr: -> Expr = parseExpr();
        if (!expr) {
            printf("%u.%u expected expression\n",
                   token.pos.row, token.pos.col);
            assert(0);
        }
        if (token.kind != RPAREN) {
            printf("%u.%u expected ')'\n",
                   token.pos.row, token.pos.col);
            assert(0);
        }
        getToken();
        return expr;
    } else {
        return nullptr;
    }
}