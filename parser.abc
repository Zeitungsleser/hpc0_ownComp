@ <stdio.hdr>
@ "parser.hdr"
@ "lexer.hdr"

fn parseStatement(): -> Expr;
fn parseExpr(): -> Expr;
fn parseAdditive(): -> Expr;
fn parseTerm(): -> Expr;
fn parseFactor(): -> Expr;
fn getExprKindFromToken(: Token): ExprKind;

fn parseProg(): array[10] of -> Expr
{
    local exprs: array[10] of -> Expr;
    local i : int = 0;
    while(i<10){
        local expr: -> Expr = parseStatement();
        if(!expr) {
            break;
        }
        exprs[i] = expr;
        i++;
    }
    return exprs;
}

fn parseStatement(): -> Expr
{
    local expr: -> Expr = parseExpr();
    if (!expr) {
        return nullptr;
    }
    if (token.kind == SEMICOLON){
        getToken();
        return expr;
    }else{
        getToken();
        printf("%u.%u ';' expected \n", 
                token.pos.row, token.pos.col);
        assert(0);
        return nullptr;
    }
}

fn parseExpr(): -> Expr
{
    local left: -> Expr = parseAdditive();
    if (!left) {
        return nullptr;
    }
    while (token.kind == EQUAL) {
        local symbol: ExprKind = getExprKindFromToken(token);
        getToken();
        local right: -> Expr = parseExpr();
        if (!right) {
            printf("%u.%u expected additive\n",
                   token.pos.row, token.pos.col);
            assert(0);
        }
        left = createBinaryExpr(symbol, left, right);
    }
    return left;
}

fn parseAdditive(): -> Expr
{
    local left: -> Expr = parseTerm();
    if (!left) {
        return nullptr;
    }
    while (token.kind == PLUS || token.kind == MINUS) {
        local symbol: ExprKind = getExprKindFromToken(token);
        getToken();
        local right: -> Expr = parseTerm();
        if (!right) {
            printf("%u.%u expected term\n",
                   token.pos.row, token.pos.col);
            assert(0);
        }
        left = createBinaryExpr(symbol, left, right);
    }
    return left;
}

fn parseTerm(): -> Expr
{
    local left: -> Expr = parseFactor();
    if (!left) {
        return nullptr;
    }
    while (token.kind == ASTERISK || token.kind == SLASH) {
        local symbol: ExprKind = getExprKindFromToken(token);
        getToken();
        local right: -> Expr = parseFactor();
        if (!right) {
            printf("%u.%u expected term\n",
                   token.pos.row, token.pos.col);
            assert(0);
        }
        left = createBinaryExpr(symbol, left, right);
    }
    return left;
}

fn parseFactor(): -> Expr
{
    if (token.kind == DECIMAL_LITERAL) {
        local expr: -> Expr = createIntegerExpr(token.val);
        getToken();
        return expr;
    } else if (token.kind == LPAREN) {
        getToken();
        local expr: -> Expr = parseExpr();
        if (!expr) {
            printf("%u.%u expected expression\n",
                   token.pos.row, token.pos.col);
            assert(0);
        }
        if (token.kind != RPAREN) {
            printf("%u.%u expected ')'\n",
                   token.pos.row, token.pos.col);
            assert(0);
        }
        getToken();
        return expr;
    } else if (token.kind == IDENTIFIER) {
        local expr: -> Expr = createIdentifierExpr(token.val);
        getToken();
        return expr;
    } else {
        return nullptr;
    }
}

fn getExprKindFromToken(tok: Token): ExprKind
{
    switch(tok.kind){
        case ASTERISK: return EXPR_MUL;
        case SLASH: return EXPR_DIV;
        case PLUS: return EXPR_ADD;
        case MINUS: return EXPR_SUB;
        case EQUAL: return EXPR_ASSIGN;
        default:
            assert(0 && "internal error: exprKindFromToken\n");
            return 0;
    }
}