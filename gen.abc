@ <stdio.hdr>

@ "gen.hdr"
@ "genvar.hdr"

global usedReg: array[16] of bool;

fn getReg(): GenReg
{
    for (local r: GenReg = 3; r < sizeof(usedReg)/sizeof(usedReg[0]); ++r){
        if (!usedReg[r]) {
            usedReg[r] = true;
            return r;
        }
    }
    assert(0 && "getReg: out of registers!\n");
    return 0;
}

fn genReleaseReg(reg:GenReg)
{
    assert(usedReg[reg]);
    usedReg[reg] = false;
}

fn genConstant(val: -> UStr): GenReg
{
    local reg: GenReg = getReg();
    printf("\tload %s, %%%d\n", val, reg);
    return reg;
}

fn genInstrToStr(instr: GenInstr): -> char
{
    local str: -> char = "??";
    switch(instr){
        case GEN_ADD: str = "add"; break;
        case GEN_SUB: str = "sub"; break;
        case GEN_MUL: str = "mul"; break;
        case GEN_DIV: str = "div"; break;
    }
    return str;
}

fn genInstr(instr: GenInstr, left: GenReg, right: GenReg): GenReg
{
    local reg: GenReg = getReg();
    printf("\t%s %%%d, %%%d, %%%d\n", genInstrToStr(instr), right, left, reg);
    return reg;
}

fn genHalt(exitCode: GenReg)
{
    printf("\thalt %%%d\n", exitCode);
}

fn genLoadAddress(varName: -> UStr): GenReg
{
    genAddGlobalVar(varName);
    local reg: GenReg = getReg();
    printf("\tload %s, %%%d\n", varName, reg);
    return reg;
}

fn genFetch(addr: GenReg): GenReg
{
    local reg: GenReg = getReg();
    printf("\tmovq (%%%d), %%%d\n", addr, reg);
    return reg;
}

fn genStore(val: GenReg, addr: GenReg)
{
    printf("\tmovq %%%d, (%%%d)\n", val, addr);
}
